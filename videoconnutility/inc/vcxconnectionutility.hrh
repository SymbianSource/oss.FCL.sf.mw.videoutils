/*
* Copyright (c) 2006 Nokia Corporation and/or its subsidiary(-ies).
* All rights reserved.
* This component and the accompanying materials are made available
* under the terms of the License "Eclipse Public License v1.0"
* which accompanies this distribution, and is available
* at the URL "http://www.eclipse.org/legal/epl-v10.html".
*
* Initial Contributors:
* Nokia Corporation - initial contribution.
*
* Contributors:
*
* Description:    vcxconnectionutility definitions and enums*
*/



#ifndef __VCX_CONNECTIOUTILITY_HRH__
#define __VCX_CONNECTIOUTILITY_HRH__

/**
 * P&S key id enums:
 * 
 * EVCxPSConnectionStatus - Master saves current connection status here. Possible values are:
 *	- EVCxNotConnected: there is no active connection in the connectionutility scope
 *  - EVCxConnected: connection exists and is active
 *  - EVCxRoamingRequest: connectiontuility is in roaming mode
 *
 * EVCxPSIapId - Current active iap id
 *
 * EVCxPSSnapId - Current active Destination id
 *
 * EVCxPSMasterExists - This value is used to notify slaves wether master exists or not.
 *  When active master disconnects it changes this value to 0. Slaves notify
 *  this and first slave which gets the notifications changes itself to be new master
 *
 * EVCxPSNbrConnInstances- Number of processes that use connectionutility and have active connection.
 *
 * EVCxPSRoamingRequestStatus - Value is used internally by the master when it waits slaves to request 
 *                              roaming state.
 * Possible values are:
 * - EVCxRoamingNotInit: when master has requested roaming from it's own clients it sets this value. 
 *                       Same value is resetted if roaming is not allowed
 * - EVCxRoamingAllowed: When master's and all slaves' clients have been accepted roaming this value is 
 *                       setted to notify that roaming is allowed
 *
 * EVCxPSNbrRoamResp - Number of responses received from different connectionutility processes.
 *
 * EVCxPSNbRoamAccepted - Number of accepted responses from the roaming request from different 
 *                        connectionutility processes.
 */
enum TVCxPSConUtilKeyId
    {
    EVCxPSConnectionStatus = 0x00000001, // TVCxConnectionStatus
    EVCxPSIapId,                         // TInt
    EVCxPSSnapId,                        // TInt
    EVCxPSMasterExists,                  // TInt
    EVCxPSNbrConnInstances,              // TInt 
    EVCxPSRoamingRequestStatus,          // TVCxPSConUtilRoamingRequest 
    EVCxPSNbrRoamResp,                   // TInt
    EVCxPSNbRoamAccepted                 // TInt
    };

/**
 * enums for roaming state to be used in
 * EVCxPSRoamingRequestStatus when EVCxPSConnectionStatus
 * is EVCxRoamingRequest
 */
enum TVCxPSConUtilRoamingRequest
    {
    EVCxRoamingNotInit = 50,
    EVCxRoamingAllowed
    };

/**
 * connection utility's connection state enums
 * EVCxNotConnected
 * current instance is not connected to network and does not maintain any active connection.
 *
 * EVCxConnecting
 * current instance is waiting for networkingmiddleware to initialize connection
 * 
 * EVCxConnected
 * current instance is connected and it maintains active connection
 * 
 * EVCxDisconnecting
 * current instance is disconnecting
 * 
 * EVCxRoamingRequest
 * current master instance is requesting it's client's about roaming. 
 * If instance is slave, this state notifies that slave does not accept roaming.
 * 
 * EVCxPendingClientRequest
 * Operation path is in the client side during roaming.
 *
 * EVCxRoamingAccepted
 * Slave: current instance's client's are all accepted roaming. 
 * Master: every local client and all slaves have been accepted roaming.  
 * 
 * EVCxError
 * unresolved error received from the networking middleware. In this case clients are notified by the IapChanged in which
 * case client can try to resolve connection by recalling GetIap, or disconnecting connection
 * 
 */
enum TVCxConnectionStatus
    {
    EVCxNotConnected = 10,
    EVCxConnecting,
    EVCxConnected,
    EVCxDisconnecting,
    EVCxRoamingRequest,
    EVCxPendingClientRequest,
    EVCxRoamingAccepted,
    EVCxError
    };
    
#endif // __VCX_CONNECTIOUTILITY_HRH__
// end of file
